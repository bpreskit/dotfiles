;; Set my key shortcuts.

;; Global shortcuts
(global-set-key (kbd "C-x x w") 'copy-file-name)
(global-set-key (kbd "C-x ;") 'copy-line-to-end)
(global-set-key (kbd "C-x :") 'copy-line-to-beginning)
(global-set-key (kbd "C-x p") 'my-previous-window)
(global-set-key (kbd "C-x <") 'my-select-first-window)
(global-set-key (kbd "C-x >") 'my-select-last-window)
(global-set-key (kbd "C-x 7") 'delete-other-windows-vertically)
(global-set-key (kbd "C-c t") 'revert-buffer)
(global-set-key (kbd "C-c ;") 'replace-string-in-line)
(global-set-key (kbd "C-a") 'beginning-of-line-dwim)
(global-set-key (kbd "C-e") 'end-of-line-dwim)
(global-set-key (kbd "C-c p") 'switch-buffer-previous-window)
(global-set-key (kbd "C-c o") 'switch-buffer-next-window)
(global-set-key (kbd "C-M-u") 'sp-backward-up-sexp)
(global-set-key (kbd "C-M-d") 'sp-down-sexp)
(global-set-key (kbd "C-M-e") 'sp-up-sexp)
(global-set-key (kbd "C-M-a") 'sp-backward-down-sexp)
(global-set-key (kbd "C-M-f") 'sp-forward-sexp)
(global-set-key (kbd "C-M-b") 'sp-backward-sexp)
(global-set-key (kbd "C-M-n") 'sp-forward-slurp-sexp)
(global-set-key (kbd "C-x 4 .") (kbd "C-x 4 M-."))
(global-set-key (kbd "C-x 4 M-.") 'xref-find-definitions-other-window)
(global-set-key (kbd "C-c 2") 'golden-window-split-down)
(global-set-key (kbd "C-c 3") 'golden-window-split-right)
(global-set-key (kbd "C-c h") 'windmove-left)
(global-set-key (kbd "C-c k") 'windmove-up)
(global-set-key (kbd "C-c j") 'windmove-down)
(global-set-key (kbd "C-c l") 'windmove-right)
(global-set-key (kbd "C-c +") 'golden-cycle)
(global-set-key (kbd "C-x 1") 'delete-other-windows-or-restore)
(global-set-key (kbd "C-c 1") 'delete-other-windows)
(global-set-key (kbd "M-g r") 'my/counsel-smart-grep)
(global-set-key (kbd "M-%") 'query-replace-regexp)
(global-set-key (kbd "C-<delete>") 'delete-region)
(global-set-key (kbd "M-n") 'next-defun)
(global-set-key (kbd "M-p") 'prev-defun)
(global-set-key (kbd "C-x C-z") nil)
(global-set-key (kbd "C-z") nil)
(global-set-key (kbd "M-z") nil)
(global-set-key (kbd "C-x t") nil)
(global-set-key [remap find-file] 'counsel-find-file)
(global-set-key [remap imenu] 'my/counsel-imenu)

(require 'projectile)
(define-key projectile-mode-map (kbd "C-x .") 'projectile-command-map)
(require 'counsel)
(if (counsel-require-program counsel-fzf-cmd t)
    (define-key projectile-command-map (kbd "f") 'fzf-or-projectile))

(require 'python)
(define-key python-mode-map (kbd "C-c u") 'python-nav-backward-up-list)
(define-key python-mode-map (kbd "C-c d") 'python-nav-up-list)
(define-key python-mode-map (kbd "M-n") 'python-nav-forward-defun)
(define-key python-mode-map (kbd "M-p") 'python-nav-backward-defun)

(require 'org)
(define-key org-mode-map (kbd "M-j") 'org-meta-return)
(define-key org-mode-map (kbd "C-c RET") 'org-insert-heading-respect-content)
(define-key org-mode-map (kbd "M-J") 'org-insert-todo-heading)
(define-key org-mode-map (kbd "C-M-u") 'org-up-element)
(define-key org-mode-map (kbd "C-M-d") 'org-down-element)
(define-key org-mode-map (kbd "M-n") 'my/org-next-item-or-heading)
(define-key org-mode-map (kbd "M-p") 'my/org-previous-item-or-heading)
(define-key org-mode-map (kbd "C-c ^") 'my-org-sort)
(define-key org-mode-map [remap org-goto] 'my/counsel-org-goto)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)

(require 'go-mode)
(define-key go-mode-map (kbd "C-h d") 'godoc)

(require 'rust-mode)
(define-key rust-mode-map (kbd "C-c C-d") nil)

(require 'ansible)
(require 'ansible-doc)
(define-key ansible-key-map (kbd "C-h d") 'ansible-doc)
(define-key ansible-doc-module-mode-map (kbd "m") 'ansible-doc)
(define-key ansible-doc-module-mode-map (kbd "d") 'ansible-doc)

(require 'octave)
(define-key inferior-octave-mode-map (kbd "C-M-n") 'forward-sexp)
(define-key inferior-octave-mode-map (kbd "C-M-p") 'backward-sexp)

(require 'man)
(define-key Man-mode-map (kbd "l") 'recenter-top-bottom)

(require 'magit)
(define-key magit-blob-mode-map (kbd "RET") 'magit-blob-visit-file)
(define-key magit-diff-mode-map (kbd "C-RET") 'magit-diff-visit-worktree-file)

(require 'company)
(define-key company-mode-map (kbd "C-M-i") 'my/company-common-or-ivy)
(define-key company-active-map (kbd "C-n") 'company-select-next-or-abort)
(define-key company-active-map (kbd "C-p") 'company-select-previous-or-abort)

(require 'swiper)
(global-set-key (kbd "C-M-s") 'counsel-grep-or-swiper)
(global-set-key (kbd "C-M-r") 'counsel-grep-or-swiper-backward)
